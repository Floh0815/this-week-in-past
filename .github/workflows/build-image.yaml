name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

env:
  IMAGE_NAME: rouhim/this-week-in-past
  IMAGE_TAG: "${{ github.ref == 'refs/heads/main' && 'latest' || 'next' }}"

jobs:

  check-oci-config:
    name: Check Containerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-repo:
    name: Check git repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt update && sudo apt install -y libsmbclient-dev libsmbclient

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Check the code style
        run: cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt update && sudo apt install -y libsmbclient-dev libsmbclient

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Verify code
        run: cargo clippy

  test:
    name: Run application tests
    runs-on: ubuntu-latest
    env:
      BIGDATA_CLOUD_API_KEY: ${{ secrets.BIGDATA_CLOUD_API_KEY }}
      OPEN_WEATHER_MAP_API_KEY: ${{ secrets.OPEN_WEATHER_MAP_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt update && sudo apt install -y libsmbclient-dev libsmbclient

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Test code
        run: cargo test

  check-unused-dependencies:
    name: Check for unused deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt update && sudo apt install -y libsmbclient-dev libsmbclient

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Analyze dependencies
        run: cargo +nightly udeps

  build-container-image:
    name: Build, test and push container image
    needs: [ check-oci-config, check-repo, check-code-style, check-code, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt update && sudo apt install -y libsmbclient-dev libsmbclient

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64, linux/arm64, linux/arm/v7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Load x86 image into local repo
        uses: docker/build-push-action@v3
        with:
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_${{ matrix.container-image-arch }}
          file: ./Containerfile
          load: true
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Prepare test env
        run: |
          mkdir -p /tmp/test
          wget https://raw.githubusercontent.com/ianare/exif-samples/master/jpg/gps/DSCN0010.jpg -O /tmp/test/DSCN0010.jpg
      - name: Start test container
        run: docker run --pull never -d --name test-container -p 8080:8080 -v /tmp/test:/resources rouhim/this-week-in-past:latest
      - name: Test container web api
        run: wget -q -O /dev/null --timeout 5 --tries 3 http://localhost:8080/api/health
      - name: Cleanup
        run: docker kill test-container && docker rm test-container

      - name: Build and push multi platform container image
        uses: docker/build-push-action@v3
        with:
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_${{ matrix.container-image-arch }}
          platforms: linux/amd64, linux/arm64, linux/arm/v7
          file: ./Containerfile
          load: false
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new