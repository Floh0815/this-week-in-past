name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

env:
  IMAGE_NAME: rouhim/this-week-in-past
  IMAGE_TAG: latest

jobs:

  set-image_tag:
    name: Set container image tag
    runs-on: ubuntu-latest
    steps:
      - name: Set image tag global
        run: |
          GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}          
          if [ $GIT_BRANCH = "main"  ]; then export TEST_IMAGE_TAG=latest; else export TEST_IMAGE_TAG=next; fi
          echo "TEST_IMAGE_TAG=$TEST_IMAGE_TAG"
#          echo "TEST_IMAGE_TAG=1234" >> $GITHUB_ENV
          env

  check-oci-config:
    name: Check Containerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-repo:
    name: Check git repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt install -y libsmbclient-dev libsmbclient

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Check the code style
        run: cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt install -y libsmbclient-dev libsmbclient

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Verify code
        run: cargo clippy

  test:
    name: Run application tests
    runs-on: ubuntu-latest
    env:
      BIGDATA_CLOUD_API_KEY: ${{ secrets.BIGDATA_CLOUD_API_KEY }}
      OPEN_WEATHER_MAP_API_KEY: ${{ secrets.OPEN_WEATHER_MAP_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt install -y libsmbclient-dev libsmbclient

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Test code
        run: cargo test

  check-unused-dependencies:
    name: Check for unused deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt install -y libsmbclient-dev libsmbclient

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Analyze dependencies
        run: cargo +nightly udeps

  build-container-image:
    name: Build container image
    needs: [ check-oci-config, check-repo, check-code-style, check-code, test ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container-image-arch: [ amd64, arm64, arm ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install required dependencies
        run: sudo apt install -y libsmbclient-dev libsmbclient

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.container-image-arch }}

      - name: Build container image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAG }}_${{ matrix.container-image-arch }}
          archs: ${{ matrix.container-image-arch }}
          containerfiles: |
            ./Containerfile

      - name: Save container image
        run: podman save -o ${{ matrix.container-image-arch }}.tar ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_${{ matrix.container-image-arch }}

      - name: Upload container image
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.container-image-arch }}
          path: ${{ matrix.container-image-arch }}.tar

  scan-container-image:
    name: Scan container for vulnerabilities
    needs: build-container-image
    runs-on: ubuntu-latest
    steps:
      - name: Download Container Image
        uses: actions/download-artifact@v3
        with:
          name: amd64
          path: .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          input: amd64.tar
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  test-container-image:
    name: Test container image
    needs: build-container-image
    runs-on: ubuntu-latest
    steps:
      - name: Download Container Image
        uses: actions/download-artifact@v3
        with:
          name: amd64
          path: .

      - name: Restore container image
        run: podman load --input amd64.tar

      - name: Prepare test env
        run: |
          mkdir -p /tmp/test
          wget https://raw.githubusercontent.com/ianare/exif-samples/master/jpg/gps/DSCN0010.jpg -O /tmp/test/DSCN0010.jpg          

      - name: Start test container
        run: podman run -d --name test-container -p 8080:8080 -v /tmp/test:/resources rouhim/this-week-in-past:latest

      - name: Test container web api
        run: wget -q -O /dev/null --timeout 5 --tries 3 http://localhost:8080/api/health

      - name: Cleanup
        run: podman kill test-container && podman rm test-container

  push-container:
    name: Push container image
    needs: [ scan-container-image, test-container-image ]
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' # only push the image if the branch is main
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download amd64 Container Image
        uses: actions/download-artifact@v3
        with:
          name: amd64
          path: .
      - name: Download arm64 Container Image
        uses: actions/download-artifact@v3
        with:
          name: arm64
          path: .
      - name: Download arm Container Image
        uses: actions/download-artifact@v3
        with:
          name: arm
          path: .

      - name: Restore container assets
        run: |
          podman load --input amd64.tar
          podman load --input arm64.tar
          podman load --input arm.tar

      - name: Create container image manifest
        run: buildah manifest create multiarch-manifest

      - name: Add all architectures to the manifest
        run: |
          buildah manifest add multiarch-manifest ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_amd64
          buildah manifest add multiarch-manifest ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_arm64
          buildah manifest add multiarch-manifest ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}_arm

      - name: Login to docker hub
        run: podman login docker.io --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push multiarch manifest to docker hub
        run: buildah manifest push --all multiarch-manifest docker://docker.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Update docker hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.IMAGE_NAME }}
