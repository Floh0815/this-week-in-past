name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

env:
  IMAGE_NAME: rouhim/this-week-in-past
  # Use latest for main and PR number plug the "ticket" string as prefix for PRs
  IMAGE_TAG: ${{ github.event_name == 'pull_request' && format('next-{0}', github.event.number) || 'latest' }}

jobs:

  check-oci-config:
    name: Check Containerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'


  check-repo:
    name: Check git repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'


  check-code-style:
    name: Check code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Check the code style
        run: cargo fmt --all -- --check


  check-code:
    name: Check rust code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Verify code
        run: cargo clippy


  test:
    name: Run application tests
    runs-on: ubuntu-latest
    env:
      BIGDATA_CLOUD_API_KEY: ${{ secrets.BIGDATA_CLOUD_API_KEY }}
      OPEN_WEATHER_MAP_API_KEY: ${{ secrets.OPEN_WEATHER_MAP_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Test code
        run: cargo test


  check-unused-dependencies:
    name: Check for unused deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Analyze dependencies
        run: cargo +nightly udeps


  build-binaries:
    name: Build
    needs: [ check-oci-config, check-repo, check-code-style, check-code, test ]
    runs-on: ubuntu-latest
    # rRun all targets in parallel
    strategy:
      matrix:
        target: [ x86_64-musl, aarch64-musl, armv7-musleabihf, arm-musleabihf ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use rust / cargo caching
        with:
          cache-on-failure: "true"

      - name: Build static application binary
        run: |
          # Prepare rust-cross/rust-musl-cross for cross compiling
          source prep-build-env.sh
          
          # Cleanup target dir
          # TODO: Remove this once we know what is produces here
          sudo rm -rf target 
          
          # Compile the desired target
          build-rust-static-bin ${{ matrix.target }}
          
          # Stage the binary for the next step
          mkdir -p target/staged
          bash stage-arch-bin.sh this-week-in-past
          
          ls -la target
          file target/**/this-week-in-past

      - name: Upload static application binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ./this-week-in-past


  test-container-image:
    name: Test container image
    needs: [ build-binaries ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download x86_64-musl static application binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-musl
          path: .

      - name: Debug
        run: |
          ls -la
          ls -la target
          tree target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build x86 image and load into local repo
        uses: docker/build-push-action@v3
        with:
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          context: .
          file: ./Containerfile
          load: true
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare test env
        run: |
          mkdir -p /tmp/test
          wget https://raw.githubusercontent.com/ianare/exif-samples/master/jpg/gps/DSCN0010.jpg -O /tmp/test/DSCN0010.jpg

      - name: Start test container
        run: docker run --pull never -d --name test-container -p 8080:8080 -v /tmp/test:/resources ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Test container web api
        run: wget -q -O /dev/null --timeout 5 --tries 3 http://localhost:8080/api/health

      - name: Cleanup
        run: docker kill test-container && docker rm test-container


  release-artifacts:
    name: Release artifacts
    needs: [ build-binaries ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download x86_64-musl binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-musl
          path: .
      - name: Download aarch64-musl binary
        uses: actions/download-artifact@v3
        with:
          name: aarch64-musl
          path: .
      - name: Download armv7-musleabihf binary
        uses: actions/download-artifact@v3
        with:
          name: armv7-musleabihf
          path: .
      - name: Download arm-musleabihf binary
        uses: actions/download-artifact@v3
        with:
          name: arm-musleabihf
          path: .

      # Create a new release based on semantic versioning
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 12.x

      - name: Install Dependencies
        run: |
          npm install -D semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/npm @semantic-release/git @semantic-release/github

      - name: Generate Semantic Release Notes and Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: npx semantic-release

      - name: Upload the x86 built binaries to the release
        uses: actions/upload-release-asset@v1
        if: github.ref == 'refs/heads/main'
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/x86_64-unknown-linux-musl/release/this-week-in-past
          asset_name: this-week-in-past-x86_64-unknown-linux-musl
          asset_content_type: application/x-executable

      - name: Upload the aarch64 built binaries to the release
        uses: actions/upload-release-asset@v1
        if: github.ref == 'refs/heads/main'
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/aarch64-unknown-linux-musl/release/this-week-in-past
          asset_name: this-week-in-past-aarch64-unknown-linux-musl
          asset_content_type: application/x-executable

      - name: Upload the armv7 built binaries to the release
        uses: actions/upload-release-asset@v1
        if: github.ref == 'refs/heads/main'
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/armv7-unknown-linux-musleabihf/release/this-week-in-past
          asset_name: this-week-in-past-armv7-unknown-linux-musleabihf
          asset_content_type: application/x-executable

      - name: Upload the arm v6 built binaries to the release
        uses: actions/upload-release-asset@v1
        if: github.ref == 'refs/heads/main'
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/arm-unknown-linux-musleabihf/release/this-week-in-past
          asset_name: this-week-in-past-arm-unknown-linux-musleabihf
          asset_content_type: application/x-executable


  publish-container-images:
    name: Publish container images
    needs: [ test-container-image ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download x86_64-musl binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-musl
          path: .
      - name: Download aarch64-musl binary
        uses: actions/download-artifact@v3
        with:
          name: aarch64-musl
          path: .
      - name: Download armv7-musleabihf binary
        uses: actions/download-artifact@v3
        with:
          name: armv7-musleabihf
          path: .
      - name: Download arm-musleabihf binary
        uses: actions/download-artifact@v3
        with:
          name: arm-musleabihf
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push multi platform container image
        uses: docker/build-push-action@v3
        # Only if branch is main fix or feature
        with:
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64, linux/arm64/v8, linux/arm/v7, linux/arm/v6
          context: .
          file: ./Containerfile
          load: false
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max